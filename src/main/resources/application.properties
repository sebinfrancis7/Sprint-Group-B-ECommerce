# spring.datasource.url=jdbc:postgresql://db:5432/postgres
# spring.datasource.username=postgres
# spring.datasource.password=postgres

# spring.cloud.gcp.sql.database-name=postgresdb
# spring.cloud.gcp.sql.instance-connection-name=cg-gcp-jee-pt-09-07-22-160:us-central1:groub-b
# spring.cloud.gcp.project-id=cg-gcp-jee-pt-09-07-22-160

spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:5432/postgres
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

spring.main.allow-circular-references=true

spring.datasource.continue-on-error=true
spring.datasource.initialization-mode=always

spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle=true
# spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


